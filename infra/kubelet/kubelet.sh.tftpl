#!/usr/bin/env bash
set -xeuo pipefail

cat <<EOF | tee /etc/modules-load.d/k8s.conf
  br_netfilter
  overlay
EOF

modprobe br_netfilter
modprobe overlay

cat <<EOF | tee /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-ip6tables = 1
  net.ipv4.ip_forward                 = 1
  net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system
swapoff -a

if ! command -v /usr/local/bin/kubectl &> /dev/null; then
  curl -s -O "https://storage.googleapis.com/kubernetes-release/release/v${k8s_version}/bin/linux/amd64/kubectl"
  chmod +x kubectl
  mv kubectl /usr/local/bin/

  semanage fcontext -a -t bin_t /usr/local/bin/kubectl || true
  restorecon -R -v /usr/local/bin

fi

if ! command -v /usr/local/bin/kubelet &> /dev/null; then
  curl -s -O "https://storage.googleapis.com/kubernetes-release/release/v${k8s_version}/bin/linux/amd64/kubelet"
  chmod +x kubelet
  mv kubelet /usr/local/bin/

  semanage fcontext -a -t bin_t /usr/local/bin/kubelet || true
  restorecon -R -v /usr/local/bin

fi

mkdir -p /var/lib/kubernetes
mkdir -p /var/lib/kubelet

cp /home/ec2-user/ca-cert.pem /var/lib/kubernetes/ca.pem
cp /home/ec2-user/kubelet-cert.pem /var/lib/kubelet/kubelet.pem
cp /home/ec2-user/kubelet-key.pem /var/lib/kubelet/kubelet-key.pem

/usr/local/bin/kubectl config set-cluster kubernetes-the-hard-way \
  --certificate-authority=ca-cert.pem \
  --embed-certs=true \
  --server=https://${cluster_private_ip}:6443 \
  --kubeconfig=kubelet.kubeconfig

/usr/local/bin/kubectl config set-credentials system:node:$(hostname) \
  --client-certificate=kubelet-cert.pem \
  --client-key=kubelet-key.pem \
  --embed-certs=true \
  --kubeconfig=kubelet.kubeconfig

/usr/local/bin/kubectl config set-context default \
  --cluster=kubernetes-the-hard-way \
  --user=system:node:$(hostname) \
  --kubeconfig=kubelet.kubeconfig

/usr/local/bin/kubectl config use-context default --kubeconfig=kubelet.kubeconfig
mv kubelet.kubeconfig /var/lib/kubelet/

cat <<EOF | tee /etc/systemd/system/kubelet.service
[Unit]
Description=Kubernetes Kubelet
Documentation=https://github.com/kubernetes/kubernetes
After=crio.service
Requires=crio.service

[Service]
ExecStart=/usr/local/bin/kubelet \\
  --config=/var/lib/kubelet/kubelet-config.yaml \\
  --container-runtime=remote \\
  --container-runtime-endpoint=unix:///var/run/crio/crio.sock \\
  --image-pull-progress-deadline=2m \\
  --kubeconfig=/var/lib/kubelet/kubelet.kubeconfig \\
  --cgroup-driver="systemd" \\
  --network-plugin=cni \\
  --register-node=true \\
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat <<EOF | tee /var/lib/kubelet/kubelet-config.yaml
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  anonymous:
    enabled: false
  webhook:
    enabled: true
  x509:
    clientCAFile: "/var/lib/kubernetes/ca.pem"
authorization:
  mode: Webhook
clusterDomain: "cluster.local"
clusterDNS:
  - "10.32.0.10"
podCIDR:
runtimeRequestTimeout: "15m"
tlsCertFile: "/var/lib/kubelet/kubelet.pem"
tlsPrivateKeyFile: "/var/lib/kubelet/kubelet-key.pem"
EOF

systemctl daemon-reload
systemctl enable kubelet
systemctl restart kubelet
